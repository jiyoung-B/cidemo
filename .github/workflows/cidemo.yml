# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Build and Deploy Spring Boot to AWS EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  PROJECT_NAME: cidemo
  S3_BUCKET_NAME: weather-eottae
  AWS_REGION: ap-northeast-2

  #  RESOURCE_PATH: ./src/main/resources/application.properties
  CODE_DEPLOY_APPLICATION_NAME: weather-code-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: weather-server

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
    - name: Build with Gradle
      run: ./gradlew clean build -x test
      shell: bash
          
#    # 디렉토리 생성
#    - name: Make Directory
#      run: mkdir -p deploy
#
#      # Jar 파일 복사
#    - name: Copy Jar
#      run: cp ./build/libs/*.jar ./deploy
#
#      # appspec.yml 파일 복사
#    - name: Copy appspec.yml
#      run: cp appspec.yml ./deploy
#
#      # script files 복사
#    - name: Copy script
#      run: cp ./scripts/*.sh ./deploy

    - name: Make zip file
      run: zip -r ./$PROJECT_NAME.zip .
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KYY }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./$PROJECT_NAME.zip s3://${{ secrets.S3_BUCKET_NAME }}/$PROJECT_NAME.zip

      # Deploy
    - name: Code Deploy
      run: |
        aws deploy create-deployment \
        --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
        --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
        --ignore-application-stop-failures \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME.zip \
        --region ap-northeast-2
#
#        aws deploy create-deployment \
#        --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
#        --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
#        --ignore-application-stop-failures \
#        --s3-location bundleType=tar,bucket=$S3_BUCKET_NAME,key=deploy.zip \
#        --region ap-northeast-2